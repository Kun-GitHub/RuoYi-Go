// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"RuoYi-Go/internal/domain/model"
)

func newSysConfig(db *gorm.DB, opts ...gen.DOOption) sysConfig {
	_sysConfig := sysConfig{}

	_sysConfig.sysConfigDo.UseDB(db, opts...)
	_sysConfig.sysConfigDo.UseModel(&model.SysConfig{})

	tableName := _sysConfig.sysConfigDo.TableName()
	_sysConfig.ALL = field.NewAsterisk(tableName)
	_sysConfig.ConfigID = field.NewInt32(tableName, "config_id")
	_sysConfig.ConfigName = field.NewString(tableName, "config_name")
	_sysConfig.ConfigKey = field.NewString(tableName, "config_key")
	_sysConfig.ConfigValue = field.NewString(tableName, "config_value")
	_sysConfig.ConfigType = field.NewString(tableName, "config_type")
	_sysConfig.CreateBy = field.NewString(tableName, "create_by")
	_sysConfig.CreateTime = field.NewTime(tableName, "create_time")
	_sysConfig.UpdateBy = field.NewString(tableName, "update_by")
	_sysConfig.UpdateTime = field.NewTime(tableName, "update_time")
	_sysConfig.Remark = field.NewString(tableName, "remark")

	_sysConfig.fillFieldMap()

	return _sysConfig
}

type sysConfig struct {
	sysConfigDo sysConfigDo

	ALL         field.Asterisk
	ConfigID    field.Int32  // 参数主键
	ConfigName  field.String // 参数名称
	ConfigKey   field.String // 参数键名
	ConfigValue field.String // 参数键值
	ConfigType  field.String // 系统内置（Y是 N否）
	CreateBy    field.String // 创建者
	CreateTime  field.Time   // 创建时间
	UpdateBy    field.String // 更新者
	UpdateTime  field.Time   // 更新时间
	Remark      field.String // 备注

	fieldMap map[string]field.Expr
}

func (s sysConfig) Table(newTableName string) *sysConfig {
	s.sysConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysConfig) As(alias string) *sysConfig {
	s.sysConfigDo.DO = *(s.sysConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysConfig) updateTableName(table string) *sysConfig {
	s.ALL = field.NewAsterisk(table)
	s.ConfigID = field.NewInt32(table, "config_id")
	s.ConfigName = field.NewString(table, "config_name")
	s.ConfigKey = field.NewString(table, "config_key")
	s.ConfigValue = field.NewString(table, "config_value")
	s.ConfigType = field.NewString(table, "config_type")
	s.CreateBy = field.NewString(table, "create_by")
	s.CreateTime = field.NewTime(table, "create_time")
	s.UpdateBy = field.NewString(table, "update_by")
	s.UpdateTime = field.NewTime(table, "update_time")
	s.Remark = field.NewString(table, "remark")

	s.fillFieldMap()

	return s
}

func (s *sysConfig) WithContext(ctx context.Context) *sysConfigDo {
	return s.sysConfigDo.WithContext(ctx)
}

func (s sysConfig) TableName() string { return s.sysConfigDo.TableName() }

func (s sysConfig) Alias() string { return s.sysConfigDo.Alias() }

func (s sysConfig) Columns(cols ...field.Expr) gen.Columns { return s.sysConfigDo.Columns(cols...) }

func (s *sysConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["config_id"] = s.ConfigID
	s.fieldMap["config_name"] = s.ConfigName
	s.fieldMap["config_key"] = s.ConfigKey
	s.fieldMap["config_value"] = s.ConfigValue
	s.fieldMap["config_type"] = s.ConfigType
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["update_time"] = s.UpdateTime
	s.fieldMap["remark"] = s.Remark
}

func (s sysConfig) clone(db *gorm.DB) sysConfig {
	s.sysConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysConfig) replaceDB(db *gorm.DB) sysConfig {
	s.sysConfigDo.ReplaceDB(db)
	return s
}

type sysConfigDo struct{ gen.DO }

func (s sysConfigDo) Debug() *sysConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s sysConfigDo) WithContext(ctx context.Context) *sysConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysConfigDo) ReadDB() *sysConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysConfigDo) WriteDB() *sysConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysConfigDo) Session(config *gorm.Session) *sysConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysConfigDo) Clauses(conds ...clause.Expression) *sysConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysConfigDo) Returning(value interface{}, columns ...string) *sysConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysConfigDo) Not(conds ...gen.Condition) *sysConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysConfigDo) Or(conds ...gen.Condition) *sysConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysConfigDo) Select(conds ...field.Expr) *sysConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysConfigDo) Where(conds ...gen.Condition) *sysConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysConfigDo) Order(conds ...field.Expr) *sysConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysConfigDo) Distinct(cols ...field.Expr) *sysConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysConfigDo) Omit(cols ...field.Expr) *sysConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysConfigDo) Join(table schema.Tabler, on ...field.Expr) *sysConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysConfigDo) Group(cols ...field.Expr) *sysConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysConfigDo) Having(conds ...gen.Condition) *sysConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysConfigDo) Limit(limit int) *sysConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysConfigDo) Offset(offset int) *sysConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysConfigDo) Unscoped() *sysConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysConfigDo) Create(values ...*model.SysConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysConfigDo) CreateInBatches(values []*model.SysConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysConfigDo) Save(values ...*model.SysConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysConfigDo) First() (*model.SysConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysConfig), nil
	}
}

func (s sysConfigDo) Take() (*model.SysConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysConfig), nil
	}
}

func (s sysConfigDo) Last() (*model.SysConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysConfig), nil
	}
}

func (s sysConfigDo) Find() ([]*model.SysConfig, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysConfig), err
}

func (s sysConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysConfig, err error) {
	buf := make([]*model.SysConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysConfigDo) FindInBatches(result *[]*model.SysConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysConfigDo) Attrs(attrs ...field.AssignExpr) *sysConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysConfigDo) Assign(attrs ...field.AssignExpr) *sysConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysConfigDo) Joins(fields ...field.RelationField) *sysConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysConfigDo) Preload(fields ...field.RelationField) *sysConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysConfigDo) FirstOrInit() (*model.SysConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysConfig), nil
	}
}

func (s sysConfigDo) FirstOrCreate() (*model.SysConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysConfig), nil
	}
}

func (s sysConfigDo) FindByPage(offset int, limit int) (result []*model.SysConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysConfigDo) Delete(models ...*model.SysConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysConfigDo) withDO(do gen.Dao) *sysConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}
