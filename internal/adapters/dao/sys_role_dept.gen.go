// Copyright (c) [2024] K. All rights reserved.
// Use of this source code is governed by a MIT license that can be found in the LICENSE file. or see：https://github.com/Kun-GitHub/RuoYi-Go/blob/main/LICENSE
// Author: K. See：https://github.com/Kun-GitHub/RuoYi-Go
// Email: hot_kun@hotmail.com or 867917691@qq.com

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"RuoYi-Go/internal/domain/model"
)

func newSysRoleDept(db *gorm.DB, opts ...gen.DOOption) sysRoleDept {
	_sysRoleDept := sysRoleDept{}

	_sysRoleDept.sysRoleDeptDo.UseDB(db, opts...)
	_sysRoleDept.sysRoleDeptDo.UseModel(&model.SysRoleDept{})

	tableName := _sysRoleDept.sysRoleDeptDo.TableName()
	_sysRoleDept.ALL = field.NewAsterisk(tableName)
	_sysRoleDept.RoleID = field.NewInt64(tableName, "role_id")
	_sysRoleDept.DeptID = field.NewInt64(tableName, "dept_id")

	_sysRoleDept.fillFieldMap()

	return _sysRoleDept
}

type sysRoleDept struct {
	sysRoleDeptDo sysRoleDeptDo

	ALL    field.Asterisk
	RoleID field.Int64 // 角色ID
	DeptID field.Int64 // 部门ID

	fieldMap map[string]field.Expr
}

func (s sysRoleDept) Table(newTableName string) *sysRoleDept {
	s.sysRoleDeptDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysRoleDept) As(alias string) *sysRoleDept {
	s.sysRoleDeptDo.DO = *(s.sysRoleDeptDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysRoleDept) updateTableName(table string) *sysRoleDept {
	s.ALL = field.NewAsterisk(table)
	s.RoleID = field.NewInt64(table, "role_id")
	s.DeptID = field.NewInt64(table, "dept_id")

	s.fillFieldMap()

	return s
}

func (s *sysRoleDept) WithContext(ctx context.Context) *sysRoleDeptDo {
	return s.sysRoleDeptDo.WithContext(ctx)
}

func (s sysRoleDept) TableName() string { return s.sysRoleDeptDo.TableName() }

func (s sysRoleDept) Alias() string { return s.sysRoleDeptDo.Alias() }

func (s sysRoleDept) Columns(cols ...field.Expr) gen.Columns { return s.sysRoleDeptDo.Columns(cols...) }

func (s *sysRoleDept) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysRoleDept) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["dept_id"] = s.DeptID
}

func (s sysRoleDept) clone(db *gorm.DB) sysRoleDept {
	s.sysRoleDeptDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysRoleDept) replaceDB(db *gorm.DB) sysRoleDept {
	s.sysRoleDeptDo.ReplaceDB(db)
	return s
}

type sysRoleDeptDo struct{ gen.DO }

func (s sysRoleDeptDo) Debug() *sysRoleDeptDo {
	return s.withDO(s.DO.Debug())
}

func (s sysRoleDeptDo) WithContext(ctx context.Context) *sysRoleDeptDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysRoleDeptDo) ReadDB() *sysRoleDeptDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysRoleDeptDo) WriteDB() *sysRoleDeptDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysRoleDeptDo) Session(config *gorm.Session) *sysRoleDeptDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysRoleDeptDo) Clauses(conds ...clause.Expression) *sysRoleDeptDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysRoleDeptDo) Returning(value interface{}, columns ...string) *sysRoleDeptDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysRoleDeptDo) Not(conds ...gen.Condition) *sysRoleDeptDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysRoleDeptDo) Or(conds ...gen.Condition) *sysRoleDeptDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysRoleDeptDo) Select(conds ...field.Expr) *sysRoleDeptDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysRoleDeptDo) Where(conds ...gen.Condition) *sysRoleDeptDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysRoleDeptDo) Order(conds ...field.Expr) *sysRoleDeptDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysRoleDeptDo) Distinct(cols ...field.Expr) *sysRoleDeptDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysRoleDeptDo) Omit(cols ...field.Expr) *sysRoleDeptDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysRoleDeptDo) Join(table schema.Tabler, on ...field.Expr) *sysRoleDeptDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysRoleDeptDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysRoleDeptDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysRoleDeptDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysRoleDeptDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysRoleDeptDo) Group(cols ...field.Expr) *sysRoleDeptDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysRoleDeptDo) Having(conds ...gen.Condition) *sysRoleDeptDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysRoleDeptDo) Limit(limit int) *sysRoleDeptDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysRoleDeptDo) Offset(offset int) *sysRoleDeptDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysRoleDeptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysRoleDeptDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysRoleDeptDo) Unscoped() *sysRoleDeptDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysRoleDeptDo) Create(values ...*model.SysRoleDept) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysRoleDeptDo) CreateInBatches(values []*model.SysRoleDept, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysRoleDeptDo) Save(values ...*model.SysRoleDept) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysRoleDeptDo) First() (*model.SysRoleDept, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) Take() (*model.SysRoleDept, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) Last() (*model.SysRoleDept, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) Find() ([]*model.SysRoleDept, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysRoleDept), err
}

func (s sysRoleDeptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysRoleDept, err error) {
	buf := make([]*model.SysRoleDept, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysRoleDeptDo) FindInBatches(result *[]*model.SysRoleDept, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysRoleDeptDo) Attrs(attrs ...field.AssignExpr) *sysRoleDeptDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysRoleDeptDo) Assign(attrs ...field.AssignExpr) *sysRoleDeptDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysRoleDeptDo) Joins(fields ...field.RelationField) *sysRoleDeptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysRoleDeptDo) Preload(fields ...field.RelationField) *sysRoleDeptDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysRoleDeptDo) FirstOrInit() (*model.SysRoleDept, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) FirstOrCreate() (*model.SysRoleDept, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysRoleDept), nil
	}
}

func (s sysRoleDeptDo) FindByPage(offset int, limit int) (result []*model.SysRoleDept, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysRoleDeptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysRoleDeptDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysRoleDeptDo) Delete(models ...*model.SysRoleDept) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysRoleDeptDo) withDO(do gen.Dao) *sysRoleDeptDo {
	s.DO = *do.(*gen.DO)
	return s
}
